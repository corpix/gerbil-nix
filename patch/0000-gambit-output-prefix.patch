commit 4cc9b2bf220e052495b98a264adc7053f9349c74
Author: Dmitry Moskowski <me@corpix.ru>
Date:   Thu Jul 18 18:35:27 2024 +0000

    draft implementation of compilation prefix directory support

diff --git gsc/_gsclib.scm gsc/_gsclib.scm
index abef1dc0..4f1faacf 100644
--- gsc/_gsclib.scm
+++ gsc/_gsclib.scm
@@ -85,6 +85,32 @@
                                          opts
                                          out)))))))
 
+(define ##compile-output-dir
+  ;; fixme: path separator is platform specific (should be a library constant?)
+  (let* ((path-separator "/")
+         (path-reader (lambda (p) (##read-all p (lambda (p) (##read-line p #\/)))))
+         ;; fixme: this parameter probably should come from `options`
+         ;; we could benefit from having this as a cli argument
+         (output-prefix (##get-environment-variable "GAMBIT_OUTPUT_PREFIX"))
+         (output-prefix (and output-prefix (##path-normalize output-prefix))))
+    (lambda (path)
+      (let* ((output-path (if (and output-prefix (##string-prefix? path-separator path))
+                            (##string-append "." path) path))
+             (output-path (if (and output-prefix (##not (##string-prefix? output-prefix path)))
+                            (##path-expand output-path output-prefix) path)))
+	    (when output-prefix
+          ;; fixme: no platform independent path-split procedure in Gambit? huh
+          ;; or better, do as Gerbil does - create-directory* with `mkdir -p` semantics
+          (let loop ((acc "")
+				     (next (##call-with-input-string (##path-directory output-path) path-reader)))
+		    (when (and (##> (##string-length acc) 0)
+                       (##not (##file-exists? acc)))
+		      (##create-directory acc))
+	        (when (##pair? next)
+		      (loop (##string-append acc path-separator (car next))
+                    (cdr next)))))
+        output-path))))
+
 (define (##compile-file-to-target filename-or-source options output)
   (let* ((options
           (##compile-options-normalize options))
@@ -111,14 +137,15 @@
                                      expanded-output))))
                   (output-filename-gen
                    (lambda ()
-                     (if output-directory?
-                         (##string-append
-                          (##path-expand
-                           (##path-strip-directory
-                            (##path-strip-extension filename))
-                           expanded-output)
-                          (##caar target.file-extensions))
-                         expanded-output)))
+                     (##compile-output-dir
+                      (if output-directory?
+                        (##string-append
+                         (##path-expand
+                          (##path-strip-directory
+                           (##path-strip-extension filename))
+                          expanded-output)
+                         (##caar target.file-extensions))
+                        expanded-output))))
                   (mod-ref
                    (or module-ref
                        (##string->symbol
@@ -297,13 +324,15 @@
     (define (generate-output-filename root input-is-target-file?)
       (case type
         ((obj)
-         (##string-append
-          root
-          ##os-obj-extension-string-saved))
+         (##compile-output-dir
+          (##string-append
+           root
+           ##os-obj-extension-string-saved)))
         (else
          (if input-is-target-file?
              root
-             (generate-next-version-of-object-file root)))))
+             (##compile-output-dir
+              (generate-next-version-of-object-file root))))))
 
     (let* ((filename
             (if (##source? filename-or-source)
